import cv2
import numpy as np
from kivy.app import App
from kivy.uix.boxlayout import BoxLayout
from kivy.uix.label import Label
from kivy.uix.image import Image as KivyImage
from kivy.graphics import Color, Rectangle
from kivy.graphics.texture import Texture
from kivy.clock import Clock
from kivy.uix.gridlayout import GridLayout
from kivy.uix.widget import Widget
from kivy.uix.screenmanager import ScreenManager, Screen

# Define the coordinates of the parking slots (top-left and bottom-right corners)
slot_width, slot_height = 100, 150
horizontal_spacing, vertical_spacing = 50, 50
row_spacing = 150

slots = [
    ((i * (slot_width + horizontal_spacing) + horizontal_spacing, vertical_spacing), 
     (i * (slot_width + horizontal_spacing) + horizontal_spacing + slot_width, vertical_spacing + slot_height))
    for i in range(4)
] + [
    ((i * (slot_width + horizontal_spacing) + horizontal_spacing, vertical_spacing + slot_height + row_spacing), 
     (i * (slot_width + horizontal_spacing) + horizontal_spacing + slot_width, vertical_spacing + 2 * slot_height + row_spacing))
    for i in range(4)
]

# Function to detect if a slot is occupied
def is_occupied(slot, frame):
    (x1, y1), (x2, y2) = slot
    slot_region = frame[y1:y2, x1:x2]
    gray_slot = cv2.cvtColor(slot_region, cv2.COLOR_BGR2GRAY)
    blurred_slot = cv2.GaussianBlur(gray_slot, (5, 5), 0)
    _, thresholded_slot = cv2.threshold(blurred_slot, 127, 255, cv2.THRESH_BINARY)

    white_pixel_count = cv2.countNonZero(thresholded_slot)
    total_pixel_count = thresholded_slot.size

    occupancy_threshold = 0.5  # Adjust this threshold based on your image
    occupancy_ratio = white_pixel_count / total_pixel_count

    return occupancy_ratio < occupancy_threshold

class ParkingSlotWidget(Widget):
    def update_slots(self, slots):
        self.canvas.clear()
        with self.canvas:
            for color, pos, size in slots:
                Color(*color)
                Rectangle(pos=pos, size=size)

class MainScreen(Screen):
    def __init__(self, **kwargs):
        super().__init__(**kwargs)
        layout = BoxLayout(orientation='vertical')

        # Image widget for camera feed
        self.image = KivyImage()
        layout.add_widget(self.image)

        # Grid layout for slot status labels
        self.slot_status = [Label(text=f"Slot {i+1}: Checking...", font_size=16) for i in range(8)]
        grid_layout = GridLayout(cols=2, size_hint_y=None)
        grid_layout.bind(minimum_height=grid_layout.setter('height'))
        for label in self.slot_status:
            grid_layout.add_widget(label)
        layout.add_widget(grid_layout)

        # Label for available slots
        self.available_label = Label(text="Available slots: 8", font_size=16)
        layout.add_widget(self.available_label)

        # Custom widget for visualizing parking slots
        self.parking_slot_widget = ParkingSlotWidget()
        layout.add_widget(self.parking_slot_widget)

        self.add_widget(layout)

class ParkingApp(App):
    def build(self):
        self.screen_manager = ScreenManager()
        self.main_screen = MainScreen(name="main")
        self.screen_manager.add_widget(self.main_screen)

        Clock.schedule_interval(self.update_frame, 1.0 / 30.0)
        return self.screen_manager

    def update_frame(self, dt):
        ret, frame = self.cap.read()
        if not ret:
            return

        available_slots = 0
        slot_widgets = []

        for i, slot in enumerate(slots):
            if is_occupied(slot, frame):
                color = (1, 0, 0, 1)  # Red for occupied
                label_text = f"Slot {i+1}: Occupied"
            else:
                color = (0, 1, 0, 1)  # Green for available
                label_text = f"Slot {i+1}: Available"
                available_slots += 1

            (x1, y1), (x2, y2) = slot
            cv2.rectangle(frame, (x1, y1), (x2, y2), (int(color[0]*255), int(color[1]*255), int(color[2]*255)), 2)
            self.main_screen.slot_status[i].text = label_text

            slot_widgets.append((color, (x1, y1), (x2 - x1, y2 - y1)))

        self.main_screen.available_label.text = f"Available slots: {available_slots}"

        # Convert the frame to Kivy texture
        buf = cv2.flip(frame, 0).tobytes()
        texture = Texture.create(size=(frame.shape[1], frame.shape[0]), colorfmt='bgr')
        texture.blit_buffer(buf, colorfmt='bgr', bufferfmt='ubyte')
        self.main_screen.image.texture = texture

        # Update the parking slot widget
        self.main_screen.parking_slot_widget.update_slots(slot_widgets)

    def on_start(self):
        self.cap = cv2.VideoCapture(0)
        if not self.cap.isOpened():
            print("Error: Could not open video stream from webcam.")

    def on_stop(self):
        self.cap.release()

if __name__ == '__main__':
    ParkingApp().run()
